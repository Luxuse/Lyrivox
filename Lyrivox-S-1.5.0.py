import os
import sys
import numpy as np
from scipy.io.wavfile import write
import tkinter as tk
from tkinter import ttk, messagebox
from tkinter.scrolledtext import ScrolledText
import threading
import subprocess
import traceback
import base64 # Import du module base64

# ---- Fonctions d'encodage ----

def encode_rot13(text):
    """Applique l'encodage ROT13 au texte."""
    return text.translate(str.maketrans(
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
        "NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm"
    ))

def encode_reverse(text):
    """Inverse simplement la cha√Æne."""
    return text[::-1]

def encode_base64(text):
    """Encode le texte en Base64."""
    try:
        # Base64 op√®re sur des octets, donc on encode d'abord la cha√Æne en bytes (UTF-8 est courant)
        encoded_bytes = base64.b64encode(text.encode('utf-8'))
        # Decode les bytes r√©sultants en cha√Æne ASCII
        return encoded_bytes.decode('ascii')
    except Exception as e:
        logging.error(f"Erreur lors de l'encodage Base64 : {e}")
        return f"ERREUR_BASE64:{e}" # Signale une erreur d'encodage

# ---- Mappage Fr√©quence & G√©n√©ration Son ----

# Ces param√®tres sont configurables dans l'interface du g√©n√©rateur
# Note: Le d√©codeur a une fr√©quence de base fixe de 1000 Hz pour le mode texte
# Pour que le d√©codage fonctionne en mode "Classique", utilisez 1000 Hz ici.
# Pour que le d√©codage fonctionne avec d'autres encodages, il faudrait un accord sur la base_freq
# ou l'inclure dans le signal ou un en-t√™te.

def text_to_freq(text, base_freq):
    """Convertit chaque caract√®re d'un texte en une fr√©quence bas√©e sur une fr√©quence de base."""
    # Mappage simple : fr√©quence de base + valeur ord * 10
    return [base_freq + ord(c)*10 for c in text]

def generate_tone(freqs, duration, rate=44100):
    """G√©n√®re une s√©quence de tons WAV √† partir d'une liste de fr√©quences."""
    if duration <= 0:
         return np.array([])

    note_duration_factor = 0.9
    silence_duration_factor = 1 - note_duration_factor

    note_duration = duration * note_duration_factor
    silence_duration = duration * silence_duration_factor

    all_samples = []

    samples_per_silence = int(rate * silence_duration)
    silence_segment = np.zeros(samples_per_silence)

    samples_per_note = int(rate * note_duration)
    t_note = np.linspace(0, note_duration, samples_per_note, endpoint=False) if samples_per_note > 0 else np.array([])


    for f in freqs:
        if samples_per_note > 0:
            tone = 0.4 * np.sin(2 * np.pi * f * t_note)
            all_samples.append(tone)

        if samples_per_silence > 0:
            all_samples.append(silence_segment)

    if not all_samples:
        return np.array([])

    return np.concatenate(all_samples)


def play_sound():
    """G√©n√®re le son bas√© sur le texte et les param√®tres, √©crit un fichier WAV et le joue."""
    status_var.set("...")
    try:
        # 1) R√©cup√®re le texte et les configurations
        status_var.set("üí¨ R√©cup√©ration du texte et des param√®tres...")
        text = text_entry.get("1.0", "end").strip()
        if not text:
            status_var.set("‚ùó Entrez du texte !")
            return

        try:
            # R√©cup√®re la fr√©quence de base et la dur√©e (configurables dans cette version du g√©n√©rateur)
            base_freq = float(base_freq_entry.get())
            note_duration = float(duration_entry.get())
            if base_freq <= 0 or note_duration <= 0:
                 status_var.set("‚ùó Fr√©quence de base et dur√©e doivent √™tre positives.")
                 return
        except ValueError:
            status_var.set("‚ùó Veuillez entrer des nombres valides pour la fr√©quence et la dur√©e.")
            return


        # 2) Encodage
        status_var.set("üîê Application de l'encodage...")
        choice = encoding_cb.get()
        if choice == "ROT13":
            encoded = encode_rot13(text)
        elif choice == "Inverser":
             encoded = encode_reverse(text)
        elif choice == "Base64": # Ajout de la gestion Base64
             encoded = encode_base64(text)
             if encoded.startswith("ERREUR_BASE64:"):
                 status_var.set(f"‚ùå {encoded}")
                 return
        else: # Classique (aucun encodage sp√©cial)
            encoded = text

        if not encoded:
             status_var.set("‚ùó Le texte encod√© est vide.")
             return

        # 3) Affiche les fr√©quences
        status_var.set("üé∂ Calcul des fr√©quences...")
        # Utilise la fr√©quence de base configurable
        freqs = text_to_freq(encoded, base_freq)

        freq_box.config(state="normal")
        freq_box.delete("1.0", "end")
        freq_box.insert("end", f"üîÑ Encodage : {choice}\n")
        freq_box.insert("end", f"üìª Fr√©quence de base : {base_freq} Hz\n")
        freq_box.insert("end", f"‚è±Ô∏è Dur√©e par caract√®re : {note_duration} s\n\n")

        # Limite l'affichage des fr√©quences pour les longs textes
        max_display_chars = 200
        display_text = encoded
        display_freqs = freqs
        if len(encoded) > max_display_chars:
             display_text = encoded[:max_display_chars] + "..."
             display_freqs = freqs[:max_display_chars]
             freq_box.insert("end", f"(Affichage limit√© aux {max_display_chars} premiers caract√®res)\n\n")

        for ch, f in zip(display_text, display_freqs):
            freq_box.insert("end", f"'{ch}' ‚Üí {f:.2f} Hz\n")

        freq_box.config(state="disabled")

        # 4) G√©n√®re le .wav
        status_var.set("üîä G√©n√©ration des donn√©es audio...")
        snd = generate_tone(freqs, note_duration)

        if snd.size == 0:
             status_var.set("‚ùó Pas de donn√©es audio g√©n√©r√©es. Texte trop court ou dur√©e nulle ?")
             return

        # Assurez-vous que les valeurs sont dans la plage int16
        data = (snd * 32767).astype(np.int16)

        fn = f"sound_{choice.replace(' ', '_').replace('/', '_')}.wav" # Nom de fichier plus s√ªr
        status_var.set(f"üíæ √âcriture du fichier : {fn}...")
        write(fn, 44100, data)

        # 5) Lance la lecture avec le lecteur syst√®me
        status_var.set(f"‚ñ∂Ô∏è Lancement de la lecture syst√®me...")
        try:
            if sys.platform.startswith("win"):
                os.startfile(fn)
            elif sys.platform == "darwin":
                subprocess.Popen(["open", fn])
            else:
                subprocess.Popen(["xdg-open", fn])
            status_var.set(f"‚úÖ Fichier g√©n√©r√© : {fn} (lecture syst√®me lanc√©e)")
        except FileNotFoundError:
             status_var.set(f"‚ö†Ô∏è Impossible de lancer la lecture syst√®me. Fichier g√©n√©r√© : {fn}")
        except Exception as e:
             status_var.set(f"‚ö†Ô∏è Erreur lors du lancement de la lecture syst√®me : {e}. Fichier g√©n√©r√© : {fn}")


    except Exception as e:
        traceback.print_exc()
        status_var.set(f"‚ùå Erreur : {type(e).__name__} - {e}")
        messagebox.showerror("Erreur G√©n√©rateur", f"Une erreur est survenue : {e}\nVoir la console pour plus de d√©tails.")


def on_click_play():
    # Lance la g√©n√©ration et la lecture dans un thread pour garder la GUI r√©active
    threading.Thread(target=play_sound).start()

def clear_text():
    """Efface les zones de texte et de statut."""
    text_entry.delete("1.0", "end")
    freq_box.config(state="normal")
    freq_box.delete("1.0", "end")
    freq_box.insert("end", "D√©tails des fr√©quences appara√Ætront ici...")
    freq_box.config(state="disabled")
    status_var.set("") # Efface le statut

def on_click_decode():
    """Lance le script de d√©codage externe."""
    status_var.set("‚ñ∂Ô∏è Lancement de l'outil de d√©codage externe...")
    decoder_script_name = "decoder.py" # Assurez-vous que ce nom correspond √† votre fichier

    # V√©rifie si le fichier d√©codeur existe
    if not os.path.exists(decoder_script_name):
        msg = f"‚ùå Erreur : Le script du d√©codeur '{decoder_script_name}' n'a pas √©t√© trouv√© dans le m√™me r√©pertoire.\nAssurez-vous que '{decoder_script_name}' est bien pr√©sent √† c√¥t√© de '{os.path.basename(__file__)}'."
        status_var.set(msg)
        messagebox.showerror("Erreur de lancement", msg)
        return

    try:
        # Lance le d√©codeur. On pourrait passer des arguments ici si le d√©codeur
        # √©tait con√ßu pour les recevoir (par exemple, la base_freq utilis√©e).
        subprocess.Popen([sys.executable, decoder_script_name])
        status_var.set(f"‚úÖ Outil de d√©codage externe ({decoder_script_name}) lanc√©.")
    except Exception as e:
        msg = f"‚ùå Erreur lors du lancement du d√©codeur : {type(e).__name__} - {e}"
        status_var.set(msg)
        messagebox.showerror("Erreur de lancement", msg)


# ---- Cr√©ation de la fen√™tre Tkinter ----

root = tk.Tk()
root.title("Lyrivox : V1.5.0") # Version mise √† jour
root.configure(bg="#333333")
root.geometry("700x650") # Taille ajust√©e
root.minsize(600, 500)

# Configuration du Style TTK
style = ttk.Style(root)
style.theme_use("clam")

# Styles personnalis√©s (copi√©s pour coh√©rence)
style.configure("TFrame", background="#333333")
style.configure("TLabel", background="#333333", foreground="#f0f0f0", font=("Segoe UI", 11))
style.configure("TButton", font=("Segoe UI", 10, "bold"), padding=8,
                background="#5cb85c", foreground="#ffffff", relief="flat")
style.map("TButton",
          background=[('active', '#4cae4c')],
          foreground=[('disabled', '#777777')])

style.configure("Decode.TButton", background="#f0ad4e", foreground="#ffffff")
style.map("Decode.TButton",
          background=[('active', '#ec971f')])

style.configure("TCombobox", fieldbackground="#444444", background="#444444", foreground="#f0f0f0",
                font=("Segoe UI", 10), relief="flat")
style.map("TCombobox",
          fieldbackground=[('readonly', '#444444')],
          foreground=[('readonly', '#f0f0f0')])

# Style des zones de texte Tkinter (pour Text et ScrolledText)
text_style_options = {
    "bg": "#444444",
    "fg": "#f0f0f0",
    "insertbackground": "#f0f0f0",
    "font": ("Consolas", 10),
    "relief": "flat"
}
# Style des Entry (pour les configurations)
entry_style_options = {
    "bg": "#444444",
    "fg": "#f0f0f0",
    "insertbackground": "#f0f0f0",
    "font": ("Segoe UI", 10),
    "insertbackground": "#f0f0f0", # Added missing insertbackground
    "relief": "flat"
}


frm = ttk.Frame(root, padding=20)
frm.pack(fill="both", expand=True)

# Titre principal
title_label = ttk.Label(frm, text="Lyrivox", font=("Segoe UI", 15, "bold"))
title_label.pack(anchor="center", pady=(0, 15))

# Zone d'entr√©e de texte
ttk.Label(frm, text="Entrez votre texte :").pack(anchor="w", pady=(0, 5))
text_entry = tk.Text(frm, height=5, wrap="word", **text_style_options)
text_entry.pack(fill="x", pady=(0, 10))

# Cadre pour les options d'encodage et de configuration
options_frame = ttk.Frame(frm)
options_frame.pack(fill="x", pady=(0, 10))

# S√©lection du type d'encodage (colonne 0)
encoding_frame = ttk.Frame(options_frame)
encoding_frame.pack(side="left", fill="x", expand=True, padx=(0, 10))
ttk.Label(encoding_frame, text="Type d'encodage :").pack(anchor="w", pady=(0, 5))
# Ajout de "Base64" aux options
encoding_cb = ttk.Combobox(encoding_frame, values=["Classique", "ROT13", "Inverser", "Base64"], state="readonly", width=15)
encoding_cb.current(0)
encoding_cb.pack(fill="x")

# Options de configuration (colonne 1) - Fr√©quence de base et Dur√©e sont configurables ici
config_frame = ttk.Frame(options_frame)
config_frame.pack(side="left", fill="x", expand=True, padx=(10, 0))

# Fr√©quence de base
base_freq_frame = ttk.Frame(config_frame)
base_freq_frame.pack(fill="x", pady=(0, 5))
ttk.Label(base_freq_frame, text="Fr√©quence de base (Hz) :").pack(side="left", padx=(0, 5))
base_freq_entry = tk.Entry(base_freq_frame, width=10, **entry_style_options)
# Valeur par d√©faut 1000 pour correspondre au d√©codeur par d√©faut
base_freq_entry.insert(0, "1000")
base_freq_entry.pack(side="left", fill="x", expand=True)

# Dur√©e par caract√®re
duration_frame = ttk.Frame(config_frame)
duration_frame.pack(fill="x", pady=(0, 5))
ttk.Label(duration_frame, text="Dur√©e par caract√®re (s) :").pack(side="left", padx=(0, 5))
duration_entry = tk.Entry(duration_frame, width=10, **entry_style_options)
duration_entry.insert(0, "0.1") # Valeur par d√©faut
duration_entry.pack(side="left", fill="x", expand=True)


# Zone d'affichage des fr√©quences (similaire √† la sortie du d√©codeur)
ttk.Label(frm, text="D√©tails des fr√©quences g√©n√©r√©es :").pack(anchor="w", pady=(0, 5))
freq_box = ScrolledText(frm, height=12, **text_style_options) # Hauteur ajust√©e
freq_box.pack(fill="both", expand=True, pady=(0, 10)) # Padding ajust√©
freq_box.insert("end", "D√©tails des fr√©quences appara√Ætront ici...")
freq_box.config(state="disabled")


# Label de statut (copi√© pour coh√©rence)
status_var = tk.StringVar()
status_label = ttk.Label(frm, textvariable=status_var, font=("Segoe UI", 9)) # Police ajust√©e
status_label.pack(anchor="w", pady=(10, 0))

# Cadre pour les boutons (copi√© pour coh√©rence)
button_frame = ttk.Frame(frm)
button_frame.pack(fill="x", pady=(15, 0))

# Boutons G√©n√©rer/Jouer, Effacer, D√©coder (layout et style copi√©s)
run_btn = ttk.Button(button_frame, text="‚ñ∂ G√©n√©rer et Jouer le Son", command=on_click_play, style="TButton")
run_btn.pack(side="left", fill="x", expand=True, padx=(0, 5))

clear_btn = ttk.Button(button_frame, text="‚úï Effacer", command=clear_text, style="TButton")
clear_btn.pack(side="left", fill="x", expand=True, padx=(5, 5))

decode_btn = ttk.Button(button_frame, text="üîç D√©coder (Externe)", command=on_click_decode, style="Decode.TButton")
decode_btn.pack(side="left", fill="x", expand=True, padx=(5, 0))


root.mainloop()